pipeline {
    
    agent any

    options {
        // This is required if you want to clean before build
        skipDefaultCheckout(true)
    }
    
    tools { maven "M3" }

    parameters {
        string(name: 'BUILD_NUMBER', defaultValue: '', description: 'Build number of the first pipeline job')
    }
    
    stages {
        
        stage('SCM checkout') {
            
            steps {
                checkout scmGit(branches: [[name: '*/java_app']],
                    extensions: [], 
                    userRemoteConfigs: [[credentialsId: 'git-pat', url: 'https://github.com/Jud42/ci_cd_infra.git']])
            }
        }
        
        stage('Build') {
            
            steps {
                sh "mvn -B -Dmaven.test.skip=true clean package"
                stash name: "artifact", includes: "**/target/*.war"
            }
        }
        
        stage('Unit Tests') {  
            
            steps {
                sh "mvn -B clean test"
                stash name: "unit_tests", includes: "target/surefire-reports/**"
            }
        }
        
        stage('Integration Tests') {
            
            steps {
                sh "mvn -B clean verify -Dsurefire.skip=true"
                stash name: 'it_tests', includes: 'target/failsafe-reports/**'
            }
        }
        
        //stage('Static Analysis') {
        //    
        //    steps {
        //        withSonarQubeEnv('sonar'){
        //            unstash 'it_tests'
        //            unstash 'unit_tests'
        //            sh 'mvn sonar:sonar -DskipTests'
        //        }
        //    }
        //}
        
        stage('Artifacts upload') {
            steps {
                unstash 'artifact'
            }
            
            post {
                
                success {
                    
                    archiveArtifacts    artifacts: 'target/*.war',
                                        allowEmptyArchive: true,
                                        fingerprint: true,
                                        onlyIfSuccessful: true
                }
            }
        }
        
         stage('Trigger Deploy Job') {
            when {
                expression {
                    return currentBuild.result == 'SUCCESS'
                }
            }
            steps {
                build job: 'deploy_app', parameters: [string(name: 'BUILD_APP_ID', value: "${env.BUILD_NUMBER}")]
            }
        }
        
    }
    
    post {
            // Clean after build
            always {
                cleanWs(cleanWhenNotBuilt: false,
                        deleteDirs: true,
                        disableDeferredWipeout: true,
                        notFailBuild: true,
                        patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                                   [pattern: '.propsfile', type: 'EXCLUDE']])
            }
    }
}